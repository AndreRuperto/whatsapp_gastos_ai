import logging
from fastapi import FastAPI, Request, Form
import os
import psycopg2
import datetime
import requests
from dotenv import load_dotenv
import json
from fastapi.responses import PlainTextResponse, JSONResponse
import time
from datetime import datetime
import re

from backend.services.scheduler import scheduler, agendar_lembrete_cron
from backend.services.whatsapp_service import enviar_mensagem_whatsapp
from backend.services.db_init import inicializar_bd

from backend.services.api_service import (
    obter_cotacao_principais, obter_cotacao, buscar_cep, listar_moedas_disponiveis, listar_conversoes_disponiveis, listar_conversoes_disponiveis_moeda, MOEDAS, CONVERSOES, MOEDA_EMOJIS
)

from backend.services.gastos_service import (
    salvar_gasto, salvar_fatura, calcular_total_gasto, pagar_fatura, registrar_salario, mensagem_ja_processada, registrar_mensagem_recebida, listar_lembretes, apagar_lembrete
)

from backend.services.autorizacao_service import verificar_autorizacao, liberar_usuario
from backend.services.usuarios_service import listar_usuarios_autorizados, revogar_autorizacao
from backend.services.token_service import gerar_token_acesso

# Configura√ß√£o b√°sica de logging
LOG_DIR = os.path.join(os.path.dirname(__file__), "..", "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, "app.log"), encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

app = FastAPI()

VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
API_COTACAO = os.getenv("API_COTACAO")
inicializar_bd(DATABASE_URL)

@app.get("/ping")
def ping():
    return {"status": "alive!"}

@app.get("/debug") # Usado para verifica√ß√£o inicial da Meta
async def verify(request: Request):
    params = dict(request.query_params)
    if params.get("hub.mode") == "subscribe" and params.get("hub.verify_token") == VERIFY_TOKEN:
        return PlainTextResponse(content=params["hub.challenge"])
    return {"status": "erro", "mensagem": "Token inv√°lido."}

@app.post("/debug")
async def debug_route(request: Request):
    # L√™ o corpo da requisi√ß√£o como JSON
    data = await request.json()
    
    # Exibe (print) no console -- mas lembre que em producao
    # o "print" pode n√£o ser vis√≠vel. 
    print("DEBUG - Corpo da requisi√ß√£o:", data)
    
    # Tamb√©m podemos logar com o logger para aparecer no Railway Deploy Logs
    logger.info(f"DEBUG - Corpo da requisi√ß√£o: {data}")
    
    # Retorna uma resposta simples, confirmando que recebeu o JSON
    return {"status": "ok", "received_data": data}

@app.get("/webhook") # Usado para verifica√ß√£o inicial da Meta
async def verify(request: Request):
    params = dict(request.query_params)
    if params.get("hub.mode") == "subscribe" and params.get("hub.verify_token") == VERIFY_TOKEN:
        return PlainTextResponse(content=params["hub.challenge"])
    return {"status": "erro", "mensagem": "Token inv√°lido."}

@app.post("/webhook")
async def receber_mensagem(request: Request):
    inicio = time.time()
    logger.info("üî• Recebi algo no webhook!")

    try:
        dados = await request.json()
        logger.info("üì© Payload recebido: %s", json.dumps(dados, indent=2))
    except Exception as e:
        body = await request.body()
        logger.error("‚ùå Erro ao decodificar JSON: %s", str(e))
        logger.error("üì¶ Corpo bruto recebido: %s", body.decode("utf-8"))
        return JSONResponse(content={"status": "erro", "mensagem": "Payload inv√°lido."}, status_code=400)

    try:
        mensagens = dados["entry"][0]["changes"][0]["value"].get("messages", [])
        if not mensagens:
            return JSONResponse(content={"status": "ignorado", "mensagem": "Nenhuma mensagem nova."}, status_code=200)

        mensagem_obj = mensagens[0]

        # üõ°Ô∏è Prote√ß√£o contra mensagens sem campo 'text'
        try:
            mensagem = mensagem_obj["text"]["body"].strip()
        except KeyError:
            tipo_mensagem = mensagem_obj.get("type", "desconhecido")
            telefone = mensagem_obj.get("from", "desconhecido")
            logger.warning(f"‚ö†Ô∏è Mensagem sem campo 'text'. Tipo: {tipo_mensagem}")
            logger.warning(f"üì¶ Conte√∫do bruto da mensagem: {json.dumps(mensagem_obj, indent=2)}")
            await enviar_mensagem_whatsapp(
                telefone,
                "üö´ Sua mensagem n√£o p√¥de ser processada. Envie um texto simples como 'oi' ou 'cota√ß√£o'."
            )
            return JSONResponse(
                content={"status": "ignorado", "mensagem": "Tipo de mensagem n√£o suportado"},
                status_code=200
            )

        mensagem_lower = mensagem.lower()
        telefone = mensagem_obj["from"]
        mensagem_id = mensagem_obj["id"]
        timestamp_whatsapp = int(mensagem_obj["timestamp"])

        logger.info("üì© Mensagem recebida: '%s' de %s", mensagem, telefone)

        if not verificar_autorizacao(telefone):
            logger.warning("üîí N√∫mero n√£o autorizado: %s", telefone)

            # Envia notifica√ß√£o ao ADMIN
            admin = os.getenv("ADMIN_PHONE")
            texto_admin = f"üîê Solicita√ß√£o de acesso de um novo n√∫mero:\n{telefone}\n\nDeseja liberar com:\nliberar {telefone}"
            await enviar_mensagem_whatsapp(admin, texto_admin)

            # Informa ao usu√°rio
            texto_usuario = "üö´ Seu n√∫mero ainda n√£o est√° autorizado a usar o assistente financeiro. Aguarde a libera√ß√£o."
            await enviar_mensagem_whatsapp(telefone, texto_usuario)

            return JSONResponse(content={"status": "bloqueado", "mensagem": "N√∫mero n√£o autorizado"}, status_code=200)

        # üîç Obt√©m o schema associado ao telefone
        schema = obter_schema_por_telefone(telefone)
        if not schema:
            logger.error(f"‚ö†Ô∏è Usu√°rio {telefone} sem schema autorizado.")
            return JSONResponse(content={"status": "erro", "mensagem": "Usu√°rio n√£o possui schema vinculado."}, status_code=403)
        
        if mensagem_ja_processada(mensagem_id):
            logger.warning("‚ö†Ô∏è Mensagem j√° processada anteriormente: %s", mensagem_id)
            return JSONResponse(content={"status": "ignorado", "mensagem": "Mensagem duplicada ignorada."}, status_code=200)

        registrar_mensagem_recebida(mensagem_id)

        partes = mensagem.split()
        if mensagem_lower in ["ajuda", "menu", "comandos"]:
            await exibir_menu_ajuda(telefone)
            return {"status": "OK", "resposta": "Menu de ajuda enviado"}

        elif mensagem_lower == "total gasto":
            total = calcular_total_gasto(schema)
            resposta = f"üìä Total gasto no m√™s: R$ {format(total, ',.2f').replace(',', '.')}"
            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}

        elif mensagem_lower == "fatura paga!":
            pagar_fatura(schema)
            resposta = "‚úÖ Todas as compras parceladas deste m√™s foram adicionadas ao total de gastos!"
            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}

        elif mensagem_lower.startswith("salario "):
            resposta = registrar_salario(mensagem, schema)
            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}
        
        elif mensagem_lower == "gr√°ficos":
            token_info = gerar_token_acesso(telefone)
            if not token_info:
                resposta = "‚ùå Erro ao gerar seu link de acesso aos gr√°ficos. Tente novamente mais tarde."
            else:
                token = token_info["token"]
                expira_em = token_info["expira_em"]
                link = f"https://dashboard-financas.up.railway.app/?phone={telefone}&token={token}"
                resposta = (
                    f"üìä *Seu link personalizado para visualizar os gr√°ficos:*\n\n"
                    f"{link}\n\n"
                    f"‚ö†Ô∏è O link √© v√°lido por 30 minutos (at√© as *{expira_em.strftime('%H:%M')}*).\n"
                    f"Depois disso, ser√° necess√°rio gerar um novo link digitando 'gr√°ficos' novamente."
                )

            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}

        elif mensagem_lower.startswith("cep "):
            partes = mensagem.split()
            if len(partes) == 2 and partes[1].isdigit():
                cep = partes[1]
                resposta = buscar_cep(cep)
            else:
                resposta = "‚ùå Formato inv√°lido. Use: `cep 05424020` (apenas n√∫meros)."

            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}

        elif mensagem_lower == "cota√ß√£o":
            resposta = obter_cotacao_principais(API_COTACAO, MOEDA_EMOJIS)
            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}
        
        elif mensagem_lower.startswith("cota√ß√£o") and ("-" in mensagem_lower or len(partes) == 2):
            moeda_origem = partes[1].upper()
            resposta = obter_cotacao(API_COTACAO, MOEDAS, CONVERSOES, moeda_origem)
            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}
        
        elif mensagem_lower.startswith("cota√ß√£o") and ("-" in mensagem_lower or len(partes) > 2):
            moeda_origem = partes[1].upper()
            moeda_destino = partes[3].upper()
            resposta = obter_cotacao(API_COTACAO, MOEDAS, CONVERSOES, moeda_origem, moeda_destino)
            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}
        
        elif mensagem_lower == "listar moedas":
            resposta = listar_moedas_disponiveis(MOEDAS)
            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}

        elif mensagem_lower == "listar conversoes":
            resposta = listar_conversoes_disponiveis(CONVERSOES)
            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}
        elif mensagem_lower.startswith("conversoes "):
            partes = mensagem.split()
            if len(partes) == 2:
                moeda = partes[1].upper()
                if moeda in CONVERSOES:
                    resposta = listar_conversoes_disponiveis_moeda(CONVERSOES, moeda)
                else:
                    resposta = f"‚ö†Ô∏è Moeda '{moeda}' n√£o encontrada ou n√£o tem convers√µes dispon√≠veis."
            else:
                resposta = "‚ùå Formato inv√°lido. Use: conversoes [moeda]"

            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}


        elif mensagem_lower.startswith("lembrete:") and "cron:" in mensagem_lower:
            resposta = processar_lembrete_formatado(mensagem, telefone)
            if resposta:
                await enviar_mensagem_whatsapp(telefone, resposta)
                return {"status": "ok"}

        elif mensagem_lower == "tabela cron":
            tabela = (
                "‚è∞ Exemplos de express√µes CRON:\n"
                "\n* * * * * ‚Üí Executa a cada minuto\n"
                "0 9 * * * ‚Üí Todos os dias √†s 09:00\n"
                "30 14 * * * ‚Üí Todos os dias √†s 14:30\n"
                "0 8 * * 1-5 ‚Üí Segunda a sexta √†s 08:00\n"
                "15 10 15 * * ‚Üí Dia 15 de cada m√™s √†s 10:15\n"
                "0 0 1 1 * ‚Üí 1¬∫ de janeiro √† meia-noite\n"
                "0 18 * * 6 ‚Üí Todos os s√°bados √†s 18:00\n"
                "\nFormato: minuto hora dia_do_mes m√™s dia_da_semana"
            )
            await enviar_mensagem_whatsapp(telefone, tabela)
            return {"status": "ok"}
        elif mensagem_lower == "lista lembretes":
            lembretes = listar_lembretes(telefone, schema)
            if not lembretes:
                resposta = "üì≠ Voc√™ ainda n√£o possui lembretes cadastrados."
            else:
                resposta = "üìã *Seus lembretes:*\n\n" + "\n".join(
                    [f"üÜî {l['id']} - \"{l['mensagem']}\"\n‚è∞ CRON: `{l['cron']}`\n" for l in lembretes]
                )
            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "ok"}
        elif mensagem_lower.startswith("apagar lembrete"):
            partes = mensagem_lower.split()
            if len(partes) >= 3 and partes[2].isdigit():
                id_lembrete = int(partes[2])
                sucesso = apagar_lembrete(telefone, id_lembrete, schema)
                resposta = "üóëÔ∏è Lembrete apagado com sucesso!" if sucesso else "‚ö†Ô∏è Lembrete n√£o encontrado ou n√£o pertence a voc√™."
            else:
                resposta = "‚ùå Formato inv√°lido. Use: apagar lembrete [ID]"
            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "ok"}
        elif mensagem_lower.startswith("liberar "):
            partes = mensagem.split()
            if len(partes) >= 3:
                numero_para_liberar = partes[1]
                nome_usuario = " ".join(partes[2:])
                if telefone == os.getenv("ADMIN_PHONE"):
                    try:
                        liberar_usuario(numero_para_liberar, nome_usuario)
                        resposta = f"‚úÖ N√∫mero {numero_para_liberar} ({nome_usuario}) autorizado com sucesso!"

                        # ‚úÖ Envia mensagem para o novo usu√°rio liberado
                        texto_bem_vindo = (
                            f"üéâ Ol√° usu√°rio!\n"
                            f"Seu n√∫mero foi autorizado e agora voc√™ pode usar o assistente financeiro via WhatsApp. "
                            f"Digite 'ajuda' para ver os comandos dispon√≠veis."
                        )
                        await enviar_mensagem_whatsapp(numero_para_liberar, texto_bem_vindo)

                    except Exception as e:
                        logger.error("‚ùå Erro ao liberar usu√°rio: %s", str(e))
                        resposta = f"‚ùå Erro ao autorizar o n√∫mero: {e}"
                else:
                    resposta = "‚ö†Ô∏è Apenas o administrador pode liberar novos usu√°rios."
            else:
                resposta = "‚ùå Formato inv√°lido. Use: liberar [n√∫mero] [nome]"

            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}
        elif mensagem_lower.startswith("n√£o liberar "):
            partes = mensagem.split()
            if len(partes) >= 2:
                numero_negado = partes[2] if len(partes) >= 3 else partes[1]
                if telefone == os.getenv("ADMIN_PHONE"):
                    # Mensagem para o admin (confirma√ß√£o)
                    resposta = f"üö´ N√∫mero {numero_negado} n√£o foi autorizado."

                    # Mensagem para o usu√°rio negado
                    texto_usuario = (
                        "üö´ Seu n√∫mero **n√£o foi autorizado** a usar o assistente financeiro no momento. "
                        "Em caso de d√∫vidas, entre em contato com o administrador."
                    )
                    await enviar_mensagem_whatsapp(numero_negado, texto_usuario)
                else:
                    resposta = "‚ö†Ô∏è Apenas o administrador pode negar autoriza√ß√µes."
            else:
                resposta = "‚ùå Formato inv√°lido. Use: n√£o liberar [n√∫mero]"

            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}
        elif mensagem_lower == "lista usuarios":
            if telefone != os.getenv("ADMIN_PHONE"):
                await enviar_mensagem_whatsapp(telefone, "‚ö†Ô∏è Apenas o administrador pode acessar essa lista.")
                return {"status": "acesso negado"}

            usuarios = listar_usuarios_autorizados()
            if not usuarios:
                resposta = "üì≠ Nenhum n√∫mero autorizado encontrado."
            else:
                resposta = "‚úÖ *Usu√°rios autorizados:*\n\n" + "\n".join(
                    [f"üë§ {nome or '(sem nome)'} - {tel}" for nome, tel, _ in usuarios]
                )

            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": "lista enviada"}
        
        elif mensagem_lower.startswith("revogar "):
            numero_para_revogar = mensagem.split(" ")[1]
            if telefone == os.getenv("ADMIN_PHONE"):
                sucesso = revogar_autorizacao(numero_para_revogar)
                if sucesso:
                    resposta = f"üö´ N√∫mero {numero_para_revogar} teve a autoriza√ß√£o revogada com sucesso!"
                else:
                    resposta = "‚ö†Ô∏è N√∫mero n√£o encontrado ou j√° est√° desautorizado."
            else:
                resposta = "‚ö†Ô∏è Apenas o administrador pode revogar autoriza√ß√µes."

            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "OK", "resposta": resposta}

        elif (
            any(char.isdigit() for char in mensagem)
            and " " in mensagem
            and "cep" not in mensagem_lower
            and not (len(mensagem.split()) >= 2 and mensagem.split()[1].startswith("55"))
        ):
            descricao, valor, categoria, meio_pagamento, parcelas = processar_mensagem(mensagem)

            logger.info(
                "‚úÖ Gasto reconhecido: %s | Valor: %.2f | Categoria: %s | Meio de Pagamento: %s | Parcelas: %d",
                descricao, valor, categoria, meio_pagamento, parcelas
            )

            if meio_pagamento in ["pix", "d√©bito"]:
                salvar_gasto(descricao, valor, categoria, meio_pagamento, schema, parcelas)
                resposta = f"‚úÖ Gasto de R$ {format(valor, ',.2f').replace(',', '.')} em '{categoria}' registrado com sucesso!"
            else:
                salvar_fatura(descricao, valor, categoria, meio_pagamento, parcelas, schema)
                resposta = f"‚úÖ Compra parcelada registrada! {parcelas}x de R$ {valor/parcelas:.2f}"

            await enviar_mensagem_whatsapp(telefone, resposta)
            log_tempos(inicio, timestamp_whatsapp, logger, mensagem, telefone)
            return {"status": "OK", "resposta": resposta}
        else:
            resposta = (
                "‚ö†Ô∏è Comando n√£o reconhecido.\n"
                "Digite *ajuda* para ver a lista de comandos dispon√≠veis."
            )
            await enviar_mensagem_whatsapp(telefone, resposta)
            return {"status": "comando inv√°lido", "resposta": resposta}

    except Exception as e:
        logger.exception("‚ùå Erro ao processar webhook:")
        return JSONResponse(content={"status": "erro", "mensagem": str(e)}, status_code=500)

def obter_schema_por_telefone(telefone):
    """
    Consulta a tabela 'usuarios' e retorna o nome do schema com base no telefone.
    """
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("SELECT nome FROM usuarios WHERE telefone = %s AND autorizado = true", (telefone,))
    resultado = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if resultado:
        nome = resultado[0]
        schema = nome.strip().lower().replace(" ", "_")
        return schema
    else:
        return None

def descrever_cron_humanamente(expr):
    minutos, hora, dia, mes, semana = expr.strip().split()
    partes = []

    dias_semana = {
        "0": "domingo",
        "1": "segunda-feira",
        "2": "ter√ßa-feira",
        "3": "quarta-feira",
        "4": "quinta-feira",
        "5": "sexta-feira",
        "6": "s√°bado"
    }

    if semana == "*":
        partes.append("todos os dias")
    elif semana in dias_semana:
        partes.append(f"aos {dias_semana[semana]}")
    elif semana == "1-5":
        partes.append("de segunda a sexta-feira")
    elif semana == "0,6":
        partes.append("aos fins de semana")
    elif "," in semana:
        dias = [dias_semana.get(d, d) for d in semana.split(",")]
        partes.append("aos " + ", ".join(dias))
    else:
        partes.append(f"nos dias da semana: {semana}")

    if dia != "*":
        partes.append(f"no dia {dia}")

    if mes != "*":
        partes.append(f"em {mes}")

    partes.append(f"\u00e0s {hora.zfill(2)}h{minutos.zfill(2)}")
    return " ".join(partes)


def processar_lembrete_formatado(mensagem: str, telefone: str):

    padrao = r'lembrete:\s*"(.+?)"\s*cron:\s*([0-9*/,\- ]{5,})'
    match = re.search(padrao, mensagem.lower())
    if match:
        lembrete_texto = match.group(1).strip()
        cron_expr = match.group(2).strip()
        agendar_lembrete_cron(telefone, lembrete_texto, cron_expr)
        descricao = descrever_cron_humanamente(cron_expr)
        return f"\u23f0 Lembrete agendado com sucesso!\nMensagem: \"{lembrete_texto}\"\nQuando: {descricao}"
    return None
    
def log_tempos(inicio: float, timestamp_whatsapp: int, logger, mensagem: str, telefone: str):
    fim = time.time()
    horario_whatsapp = datetime.fromtimestamp(timestamp_whatsapp).strftime('%Y-%m-%d %H:%M:%S')
    horario_servidor = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    logger.info("üì© Mensagem recebida: '%s' de %s", mensagem, telefone)
    logger.info("‚è±Ô∏è Timestamp WhatsApp: %s", horario_whatsapp)
    logger.info("üïí Timestamp do servidor: %s", horario_servidor)
    logger.info("‚ö° Tempo total de resposta: %.2f segundos", fim - inicio)

def processar_mensagem(mensagem: str):
    """
    Processa a mensagem e extrai descri√ß√£o, valor, categoria, meio de pagamento e parcelas.
    """
    try:
        logger.info("üì© Mensagem original recebida: '%s'", mensagem)
        partes = mensagem.lower().split()
        logger.info("üîé Mensagem ap√≥s split: %s", partes)

        valor = 0.0
        meio_pagamento = "Desconhecido"
        parcelas = 1
        descricao = ""

        for i, parte in enumerate(partes):
            if parte.replace(".", "").isdigit():
                valor = float(parte)
                descricao = " ".join(partes[:i])

                # üìå Detectando parcelamento (Ex: "3x cr√©dito")
                if i + 1 < len(partes) and partes[i + 1].endswith("x") and partes[i + 1][:-1].isdigit():
                    parcelas = int(partes[i + 1][:-1])
                    i += 1  # Avan√ßar para evitar erro

                # üìå Detectando meio de pagamento (Ex: "cr√©dito", "d√©bito", "pix")
                if i + 1 < len(partes) and partes[i + 1] in ["pix", "cr√©dito", "d√©bito"]:
                    meio_pagamento = partes[i + 1]

                break  # Paramos ap√≥s encontrar o valor

        if valor == 0.0:
            logger.warning("‚ö†Ô∏è Nenhum valor encontrado na mensagem!")
            return "Erro", 0.0, "Desconhecido", "Desconhecido", 1

        categoria = definir_categoria(descricao)
        return descricao.strip(), valor, categoria, meio_pagamento, parcelas

    except Exception as e:
        logger.exception("‚ùå Erro ao processar mensagem:")
        return "Erro", 0.0, "Desconhecido", "Desconhecido", 1

def definir_categoria(descricao: str):
    """
    Seu dicion√°rio de categorias, com palavras-chave.
    """
    categorias = {
        # üçΩÔ∏è Alimenta√ß√£o
        "almo√ßo": "Alimenta√ß√£o",
        "jantar": "Alimenta√ß√£o",
        "caf√©": "Alimenta√ß√£o",
        "lanchonete": "Alimenta√ß√£o",
        "pizza": "Alimenta√ß√£o",
        "hamburguer": "Alimenta√ß√£o",
        "churrasco": "Alimenta√ß√£o",
        "restaurante": "Alimenta√ß√£o",
        "delivery": "Alimenta√ß√£o",
        "sushi": "Alimenta√ß√£o",
        "padaria": "Alimenta√ß√£o",
        "bar": "Alimenta√ß√£o",
        "fast food": "Alimenta√ß√£o",
        "marmita": "Alimenta√ß√£o",
        "doceria": "Alimenta√ß√£o",
        "brigadeiro": "Alimenta√ß√£o",
        "chocolate": "Alimenta√ß√£o",
        "brownie": "Alimenta√ß√£o",
        "festival gastron√¥mico": "Alimenta√ß√£o",
        "rod√≠zio": "Alimenta√ß√£o",
        "buffet": "Alimenta√ß√£o",
        "petiscos": "Alimenta√ß√£o",
        "food truck": "Alimenta√ß√£o",
        "vinho": "Alimenta√ß√£o",
        "cerveja": "Alimenta√ß√£o",
        "bebidas": "Alimenta√ß√£o",
        "feijoada": "Alimenta√ß√£o",
        "coxinha": "Alimenta√ß√£o",
        "esfiha": "Alimenta√ß√£o",
        "pastel": "Alimenta√ß√£o",
        "salgado": "Alimenta√ß√£o",
        "tapioca": "Alimenta√ß√£o",
        "sorvete": "Alimenta√ß√£o",
        "gelato": "Alimenta√ß√£o",
        "milkshake": "Alimenta√ß√£o",
        "cupcake": "Alimenta√ß√£o",

        # üöó Transporte
        "uber": "Transporte",
        "99": "Transporte",
        "√¥nibus": "Transporte",
        "metr√¥": "Transporte",
        "trem": "Transporte",
        "gasolina": "Transporte",
        "estacionamento": "Transporte",
        "ped√°gio": "Transporte",
        "bike": "Transporte",
        "patinete": "Transporte",
        "carro": "Transporte",
        "manuten√ß√£o carro": "Transporte",
        "reboque": "Transporte",
        "taxi": "Transporte",
        "motot√°xi": "Transporte",
        "passagem": "Transporte",
        "a√©reo": "Transporte",
        "uber eats": "Transporte",
        "combust√≠vel": "Transporte",
        "lava r√°pido": "Transporte",

        # üè† Moradia
        "aluguel": "Moradia",
        "condom√≠nio": "Moradia",
        "iptu": "Moradia",
        "seguro residencial": "Moradia",
        "faxina": "Moradia",
        "reforma": "Moradia",
        "m√≥vel": "Moradia",
        "imobili√°ria": "Moradia",
        "decora√ß√£o": "Moradia",
        "mudan√ßa": "Moradia",
        "pintura": "Moradia",
        "limpeza": "Moradia",
        "s√≠ndico": "Moradia",
        "guarita": "Moradia",
        "porteiro": "Moradia",
        "manuten√ß√£o casa": "Moradia",
        "jardinagem": "Moradia",
        "ar condicionado": "Moradia",
        "g√°s encanado": "Moradia",
        "port√£o": "Moradia",

        # üîå Contas e Servi√ßos P√∫blicos
        "luz": "Contas",
        "√°gua": "Contas",
        "internet": "Contas",
        "celular": "Contas",
        "tv a cabo": "Contas",
        "telefonia": "Contas",
        "taxa lixo": "Contas",
        "energia": "Contas",
        "ilumina√ß√£o": "Contas",
        "esgoto": "Contas",
        "contador": "Contas",
        "ipva": "Contas",
        "dpvat": "Contas",
        "licenciamento": "Contas",
        "multas": "Contas",

        # üõí Supermercado
        "mercado": "Supermercado",
        "compras": "Supermercado",
        "hortifruti": "Supermercado",
        "a√ßougue": "Supermercado",
        "feira": "Supermercado",
        "peixaria": "Supermercado",
        "frios": "Supermercado",
        "mercearia": "Supermercado",
        "limpeza": "Supermercado",
        "higiene": "Supermercado",
        "perfumaria": "Supermercado",
        "emp√≥rio": "Supermercado",
        "hipermercado": "Supermercado",
        "suprimentos": "Supermercado",
        "armaz√©m": "Supermercado",

        # üé≠ Lazer e Entretenimento
        "cinema": "Lazer",
        "show": "Lazer",
        "teatro": "Lazer",
        "netflix": "Lazer",
        "spotify": "Lazer",
        "prime video": "Lazer",
        "disney+": "Lazer",
        "xbox game pass": "Lazer",
        "playstation plus": "Lazer",
        "steam": "Lazer",
        "livro": "Lazer",
        "parque": "Lazer",
        "passeio": "Lazer",
        "viagem": "Lazer",
        "ingresso": "Lazer",

        # üè• Sa√∫de
        "farm√°cia": "Sa√∫de",
        "rem√©dio": "Sa√∫de",
        "m√©dico": "Sa√∫de",
        "dentista": "Sa√∫de",
        "hospital": "Sa√∫de",
        "exame": "Sa√∫de",
        "academia": "Sa√∫de",
        "pilates": "Sa√∫de",
        "fisioterapia": "Sa√∫de",
        "nutricionista": "Sa√∫de",
        "psic√≥logo": "Sa√∫de",
        "massagem": "Sa√∫de",
        "terapia": "Sa√∫de",
        "plano de sa√∫de": "Sa√∫de",
        "suplemento": "Sa√∫de",
        "vacina": "Sa√∫de",
        "√≥culos": "Sa√∫de",
        "lente de contato": "Sa√∫de",
        "cirurgia": "Sa√∫de",
        "bem-estar": "Sa√∫de",

        # üéì Educa√ß√£o
        "faculdade": "Educa√ß√£o",
        "curso": "Educa√ß√£o",
        "apostila": "Educa√ß√£o",
        "plataforma educacional": "Educa√ß√£o",
        "mentoria": "Educa√ß√£o",
        "workshop": "Educa√ß√£o",
        "palestra": "Educa√ß√£o",
        "treinamento": "Educa√ß√£o",
        "aula particular": "Educa√ß√£o",
        "material escolar": "Educa√ß√£o",

        # üíª Tecnologia
        "notebook": "Tecnologia",
        "computador": "Tecnologia",
        "fones de ouvido": "Tecnologia",
        "mouse": "Tecnologia",
        "teclado": "Tecnologia",
        "tablet": "Tecnologia",
        "monitor": "Tecnologia",
        "ssd": "Tecnologia",
        "pendrive": "Tecnologia",
        "cabo usb": "Tecnologia",
        "hd externo": "Tecnologia",
        "streaming": "Tecnologia",
        "smartphone": "Tecnologia",
        "console": "Tecnologia",
        "carregador": "Tecnologia",

        # üëó Vestu√°rio
        "roupa": "Vestu√°rio",
        "t√™nis": "Vestu√°rio",
        "cal√ßado": "Vestu√°rio",
        "camiseta": "Vestu√°rio",
        "cal√ßa": "Vestu√°rio",
        "blusa": "Vestu√°rio",
        "moletom": "Vestu√°rio",
        "casaco": "Vestu√°rio",
        "acess√≥rios": "Vestu√°rio",
        "joias": "Vestu√°rio",
        "mala": "Vestu√°rio",
        "bolsa": "Vestu√°rio",
        "meias": "Vestu√°rio",
        "cinto": "Vestu√°rio",
        "biqu√≠ni": "Vestu√°rio",

        # üéÅ Presentes
        "presente": "Presentes",
        "lembrancinha": "Presentes",
        "anivers√°rio": "Presentes",
        "casamento": "Presentes",
        "amigo secreto": "Presentes",
        "mimo": "Presentes",

        # ‚ù§Ô∏è Doa√ß√µes
        "doa√ß√£o": "Doa√ß√µes",
        "vaquinha": "Doa√ß√µes",
        "ong": "Doa√ß√µes",
        "ajuda": "Doa√ß√µes",
        "solidariedade": "Doa√ß√µes",

        # üí∞ Finan√ßas
        "investimento": "Finan√ßas",
        "poupan√ßa": "Finan√ßas",
        "cart√£o de cr√©dito": "Finan√ßas",
        "empr√©stimo": "Finan√ßas",
        "seguro": "Finan√ßas",
        "juros": "Finan√ßas",
        "financiamento": "Finan√ßas",
        "cons√≥rcio": "Finan√ßas",
        "aplica√ß√£o": "Finan√ßas",
        "corretora": "Finan√ßas",

        # ‚öôÔ∏è Servi√ßos
        "barbearia": "Servi√ßos",
        "cabeleireiro": "Servi√ßos",
        "manicure": "Servi√ßos",
        "est√©tica": "Servi√ßos",
        "encanador": "Servi√ßos",
        "eletricista": "Servi√ßos",
        "reparo": "Servi√ßos",
        "fotografia": "Servi√ßos",
        "freelancer": "Servi√ßos",
        "tradu√ß√£o": "Servi√ßos",
        "lavanderia": "Servi√ßos",
        "pet shop": "Servi√ßos",
        "faxineira": "Servi√ßos",
        "costureira": "Servi√ßos",
        "carpintaria": "Servi√ßos",

        # üì¶ Assinaturas
        "revista": "Assinaturas",
        "jornal": "Assinaturas",
        "plano anual": "Assinaturas",
        "mensalidade": "Assinaturas",
        "patreon": "Assinaturas",
        "apoia.se": "Assinaturas",
        "twitch sub": "Assinaturas",
        "club de assinatura": "Assinaturas",
        "newsletter paga": "Assinaturas",
        "finclass": "Assinaturas",

        # üê± Pets
        "ra√ß√£o": "Pets",
        "petisco": "Pets",
        "veterin√°rio": "Pets",
        "vacina pet": "Pets",
        "casinha": "Pets",
        "areia": "Pets",
        "banho e tosa": "Pets",
        "coleira": "Pets",
        "brinquedo pet": "Pets",
        "rem√©dio pet": "Pets",

        # üõ†Ô∏è Hobby & DIY
        "ferramenta": "Hobby/DIY",
        "madeira": "Hobby/DIY",
        "tinta spray": "Hobby/DIY",
        "cola quente": "Hobby/DIY",
        "artesanato": "Hobby/DIY",
        "bordado": "Hobby/DIY",
        "tricot": "Hobby/DIY",
        "croch√™": "Hobby/DIY",

        # üå± Jardinagem
        "mudas": "Jardinagem",
        "adubo": "Jardinagem",
        "fertilizante": "Jardinagem",
        "vaso": "Jardinagem",
        "regador": "Jardinagem",
    }

    # Percorre o dicion√°rio e verifica se a palavra-chave est√° na descri√ß√£o
    for chave, cat in categorias.items():
        if chave in descricao.lower():
            return cat
    return "Outros"

COMANDOS = [
    {
        "comando": "ajuda",
        "descricao": "Mostra este menu",
        "admin_only": False,
    },
    {
        "comando": "total gasto",
        "descricao": "Exibe o total de gastos do m√™s",
        "admin_only": False,
    },
    {
        "comando": "gr√°ficos",
        "descricao": "Envia um link com os gr√°ficos financeiros",
        "admin_only": False,
    },
    {
        "comando": "fatura paga!",
        "descricao": "Informa que sua fatura foi paga",
        "admin_only": False,
    },
    {
        "comando": "cota√ß√£o",
        "descricao": "Mostra as principais moedas do dia",
        "admin_only": False,
    },
    {
        "comando": "lista cota√ß√£o",
        "descricao": "Lista todas as moedas dispon√≠veis",
        "admin_only": False,
    },
    {
        "comando": "cota√ß√£o [moeda]",
        "descricao": "Mostra a cota√ß√£o da moeda (ex: cota√ß√£o USD)",
        "admin_only": False,
    },
    {
        "comando": "cota√ß√£o [moeda1]-[moeda2]",
        "descricao": "Convers√£o entre duas moedas (ex: cota√ß√£o USD-EUR)",
        "admin_only": False,
    },
    {
        "comando": "cep [n√∫mero]",
        "descricao": "Retorna o endere√ßo correspondente ao CEP",
        "admin_only": False,
    },
    {
        "comando": "lembrete: \"msg\" + cron: padr√£o",
        "descricao": "Agenda um lembrete com cron",
        "admin_only": False,
    },
    {
        "comando": "tabela cron",
        "descricao": "Exibe exemplos de agendamento CRON",
        "admin_only": False,
    },
    {
        "comando": "lista lembretes",
        "descricao": "Lista todos os lembretes ativos",
        "admin_only": False,
    },
    {
        "comando": "apagar lembrete [id]",
        "descricao": "Apaga um lembrete espec√≠fico",
        "admin_only": False,
    },
    # üëë Admin
    {
        "comando": "liberar [telefone] [nome]",
        "descricao": "Autoriza novo n√∫mero e cria schema",
        "admin_only": True,
    },
    {
        "comando": "n√£o liberar [telefone]",
        "descricao": "Recusa um n√∫mero e envia notifica√ß√£o ao usu√°rio",
        "admin_only": True,
    },
    {
        "comando": "lista usuarios",
        "descricao": "Lista todos os usu√°rios autorizados",
        "admin_only": True,
    },
    {
        "comando": "revogar [telefone]",
        "descricao": "Revoga a autoriza√ß√£o de um n√∫mero",
        "admin_only": True,
    },
]

async def exibir_menu_ajuda(telefone: str):
    admin_phone = os.getenv("ADMIN_PHONE")
    is_admin = telefone == admin_phone

    titulo = "üõ†Ô∏è *Menu de Ajuda - Administrador*" if is_admin else "ü§ñ *Menu de Ajuda - Assistente Financeiro*"
    texto_ajuda = [titulo, "\nüìå *Comandos dispon√≠veis:*"]

    for cmd in COMANDOS:
        if not cmd["admin_only"] or is_admin:
            texto_ajuda.append(f"‚Ä¢ `{cmd['comando']}` ‚Üí {cmd['descricao']}")

    if not is_admin:
        texto_ajuda.append("\nüß† *Exemplo de lembrete:*\n"
                           "`lembrete: \"Pagar conta\"`\n"
                           "`cron: 0 9 * * 1-5` ‚Üí Todos os dias √∫teis √†s 9h")

    await enviar_mensagem_whatsapp(telefone, "\n".join(texto_ajuda))
